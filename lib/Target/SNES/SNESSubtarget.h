//===-- SNESSubtarget.h - Define Subtarget for the SNES -----------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the SNES specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_SNES_SUBTARGET_H
#define LLVM_SNES_SUBTARGET_H

#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetSubtargetInfo.h"

#include "SNESFrameLowering.h"
#include "SNESISelLowering.h"
#include "SNESInstrInfo.h"
#include "SNESSelectionDAGInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "SNESGenSubtargetInfo.inc"

namespace llvm {

/// A specific SNES target MCU.
class SNESSubtarget : public SNESGenSubtargetInfo {
public:
  //! Creates an SNES subtarget.
  //! \param TT  The target triple.
  //! \param CPU The CPU to target.
  //! \param FS  The feature string.
  //! \param TM  The target machine.
  SNESSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
               SNESTargetMachine &TM);

  const SNESInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override { return &FrameLowering; }
  const SNESTargetLowering *getTargetLowering() const override { return &TLInfo; }
  const SNESSelectionDAGInfo *getSelectionDAGInfo() const override { return &TSInfo; }
  const SNESRegisterInfo *getRegisterInfo() const override { return &InstrInfo.getRegisterInfo(); }

  /// Parses a subtarget feature string, setting appropriate options.
  /// \note Definition of function is auto generated by `tblgen`.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  /// Gets the ELF architecture for the e_flags field
  /// of an ELF object file.
  unsigned getELFArch() const {
    assert(ELFArch != 0 &&
           "every device must have an associate ELF architecture");
    return ELFArch;
  }

private:
  SNESInstrInfo InstrInfo;
  SNESFrameLowering FrameLowering;
  SNESTargetLowering TLInfo;
  SNESSelectionDAGInfo TSInfo;

  /// The ELF e_flags architecture.
  unsigned ELFArch;

  // Dummy member, used by FeatureSet's. We cannot have a SubtargetFeature with
  // no variable, so we instead bind pseudo features to this variable.
  bool m_FeatureSetDummy;
};

} // end namespace llvm

#endif // LLVM_SNES_SUBTARGET_H
